<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>

	<arg name="octomap_resolution" default="0.2"/>

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="$(arg octomap_resolution)" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="3.0" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/camera/depth_registered/points" />

	</node>
<!--
<node pkg="tf" type="static_transform_publisher" name="cam2subt" args="0 0 0 -.5 .4996 -.5 .5004  /Wand /camera_link  100"/>
-->

<!--
<node pkg="tf" type="static_transform_publisher" name="cam2subt" args="0 0 0 0 0 0 1  /SubT /camera_link  100"/>
-->
</launch>
